package de.fhluebeck.group3.model;

import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.value.ObservableValue;

/**
 * The Step is mapped with Step table in DB.
 * 
 * This class implements Comparable to give specific rules for making comparison
 * between two steps. Later in the project we just use List.sort() to sort the
 * list.
 * 
 * @author Yichen.Hua on 2018/05/13.
 */
public final class Step implements Comparable<Step> {

	/**
	 * id of the step
	 */
	private Integer stepID;

	/**
	 * content of the step
	 */
	private String content;

	/**
	 * order of a step in an recipe, used for find the proper order.
	 */
	private Integer stepOrder;

	/**
	 * Status of user: 1 for valid 0 for deleted.
	 */
	private Integer status;

	/**
	 * recipe id that this step belongs to.
	 */
	private Integer recipeID;

	/** ==============Constructors============== */
	/**
	 * Default constructor.
	 */
	public Step() {
		super();
	}

	/**
	 * Constructor.
	 *
	 * @param content
	 *            content of the step.
	 */
	public Step(String content) {
		super();
		this.content = content;
	}

	/**
	 * Constructor with attributes except stepID;
	 * 
	 * @param content
	 *            content of the step.
	 * 
	 * @param stepOrder
	 *            stepOrder of the step.
	 * 
	 * @param recipeID
	 *            recipeID of the step.
	 * 
	 */
	public Step(String content, Integer stepOrder, Integer recipeID) {
		this(null, content, stepOrder, recipeID);
	}

	/**
	 * Constructor of all attributes. -- Do not set stepID yourself, it is
	 * auto-generated by database.
	 * 
	 * @param stepID
	 *            ID of the step.
	 * 
	 * @param content
	 *            content of the step.
	 * 
	 * @param stepOrder
	 *            stepOrder of the step.
	 * 
	 * @param recipeID
	 *            recipeID of the step.
	 * 
	 */
	public Step(Integer stepID, String content, Integer stepOrder, Integer recipeID) {
		super();
		this.stepID = stepID;
		this.content = content;
		this.stepOrder = stepOrder;
		this.recipeID = recipeID;
		this.status = 1;
	}

	/** ==============Getters and setters.============== */
	/**
	 * @return the stepID
	 */
	public Integer getStepID() {
		return stepID;
	}

	/**
	 * @return the recipeID
	 */
	public Integer getRecipeID() {
		return recipeID;
	}

	/**
	 * @param recipeID
	 *            the recipeID to set
	 */
	public void setRecipeID(Integer recipeID) {
		this.recipeID = recipeID;
	}

	/**
	 * @param stepID
	 *            the stepID to set
	 */
	public void setStepID(Integer stepID) {
		this.stepID = stepID;
	}

	public ObservableValue<Integer> getIntegerProperityStepOrder() {
		ObservableValue<Integer> obsInt = new SimpleIntegerProperty(this.stepOrder).asObject();
		return obsInt;
	}

	/**
	 * @return the content
	 */
	public String getContent() {
		return content;
	}

	/**
	 * @param content
	 *            the content to set
	 */
	public void setContent(String content) {
		this.content = content;
	}

	/**
	 * @return the stepOrder
	 */
	public Integer getStepOrder() {
		return stepOrder;
	}

	/**
	 * @return the StringProperityStepContent.
	 */
	public ObservableValue<String> getStringProperityStepContent() {
		ObservableValue<String> obsString = new SimpleStringProperty(this.content);
		return obsString;
	}

	/**
	 * @param stepOrder
	 *            the stepOrder to set
	 */
	public void setStepOrder(Integer stepOrder) {
		this.stepOrder = stepOrder;
	}

	/**
	 * @return the status
	 */
	public Integer getStatus() {
		return status;
	}

	/**
	 * @param status
	 *            the status to set
	 */
	public void setStatus(Integer status) {
		this.status = status;
	}

	/**
	 * Override toString method, print basic information of a step.
	 */
	@Override
	public String toString() {
		return "Step [stepID=" + stepID + ", content=" + content + ", stepOrder=" + stepOrder + ", status=" + status
				+ ", recipeID=" + recipeID + "]";
	}

	/**
	 * Override compareTo method in Comparator, give specific rules for comparing
	 * two steps according to their step order.
	 */
	@Override
	public int compareTo(Step otherStep) {
		return this.getStepOrder().compareTo(otherStep.getStepOrder());
	}

}
